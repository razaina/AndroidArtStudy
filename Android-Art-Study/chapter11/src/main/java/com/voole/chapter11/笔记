Android中的线程和线程池

      AsyncTask底层用了线程池，IntentService和HandlerThread底层直接用的线程。

      IntentService的作用很像一个后台线程，但是IntentService是一个服务，不容易被后台系统杀死， 如果是一个线程
      不依附于四大组件的话很容易被杀死。

      AsyncTask的版本不一样，效果不一样，如果在3.0以上想实现并行，需要调用executeOnExecutor。

      线程池的优点：
        1.重用线程池中的线程，避免因为创建和销毁线程时所带来的的性能消耗；
        2.能有效控制线程池中的最大并发数，避免大量的线程之间因为互相抢占系统资源而导致的阻塞现象
        3.能够对线程进行有效的管理，并提供定时执行以及指定间隔循环执行等功能

      Android中的线程池的概念来源于java的Executor，Executor是一个接口，真正实现是ThreadPoolExecutor，ThreadPoolExecutor
      设置了一系列的参数来配置。通过不通的参数来配置不同的线程池。

      AsyncTask线程池的配置：
        1.核心线程数为cpu核数+1；
        2.线程池最大线程数cpu核心线程数*2+1；
        3.核心线程没有超时机制，非核心线程闲置超时时间为1s
        4.任务队列的容量为128

      四类线程池分别是FixedThreadPool，CacheThreadPool,ScheduleThreadPool,SingleThreadPool
      1.FixedThreadPool
        通过Executors的newFixedThreadPool来创建。它是一种线程数量固定的线程池，当线程处于空闲状态时，它们并不会
        被回收，除非线程池关闭了。当所有的线程处于活动状态时，新任务都会处于等待状态，直到有新的线程空闲出来。因为
        FixedThreadPool只有核心线程并且这些核心线程不会被回收，这意味着它能更快速的响应外部的请求。

      2.CacheThreadPool
        它是一种线程数量不定的线程池，它只有非核心线程，并且其最大线程数为Integer.MAX_VALUE。由于Integer.MAX_VALUE
        是一个很大的数，实际上就相当于最大线程数可以任意大。当线程池中的线程都处于活动状态时，线程池会创建新的线程
        来处理新任务，否则就会利用空闲的线程来处理新任务。线程池中的空闲线程都有超时机制，这个超时时长为60s,超过60s
        闲置的线程就会被回收。和FixedThreadPool不同的是，CacheThreadPool的任务队列相当于一个空队列，这将导致任何
        任务都会被立即执行。


      3.ScheduleThreadPool
        他的核心线程数是固定的，而非核心线程数是没有限制的，并且当非核心线程闲置时会被立即回收。这个线程池主要用于
        执行定时任务和具有固定周期的重复任务。
        执行的时候用schedule方法。

      4。SingleThreadPool
        这类线程池内部只有一个核心线程池，它确保所有的任务都在同一个任务中执行，他的意义在于统一所有的外界任务到一个
        线程中，这使得在这些任务之间不需要处理线程同步的问题。














