进程和线程的概念：
    进程：系统最小的执行单元
    线程：系统最小的调度单元

    在四大组件中添加process属性的方式来规定运行在特定的进程中。
    android:process=":remote" :的含义是指要在当前进程名前加上当前的包名，所以全部的名字为packageName.remote

    以：开头的进程属于当前应用的私有进程，其他应用的组件不能和他跑在同一个进程中，不以：开头的进程属于全局进程，
    其他应用可以通过shareUid的方式可以和他跑在同一个进程中。

    Android会为每一个应用分配一个Uid，具有相同Uid的应用才能共享数据。所以，两个应用具有相同的sharedUid和签名
    才能共享数据，在这种情况下，可以互相访问私有数据，不管他们是否在同一个进程中。

    所有运行在不同进程中的4大组件，通过内存共享数据都会失败

    一般来说，使用多进程会有以下的问题：
        1.静态成员和单例模式完全失效
        2.线程同步机制完全失效（锁的不是同一个对象）
        3.sharedPreferences的可靠性下降（同时读写会出现问题）
        4.application会重复创建多次（每个进程开启的时候会为每个进程分配一个虚拟机，所以就相同于一个应用启动，
        application就会启动）


     虽然说不能直接共享内存，但是通过跨进程通信我们还是能够实现数据交互，实现跨进程的方式很多,比如：
        1.通过Intent来传递数据
        2.共享文件和sharedPreference
        3.基于Binder的Messenger,和aidl和Socket


     Serializable和Parcelble：
        1.Serializable：serialVersionUID，用来辅助序列化和反序列化的过程，只有serialVersionUID相同时，序列化
        和反序列化才能成功，一般我们去手动指定一个默认值1L。这样不管改变与否都能反序列话成功。
        2.Parcelbel：也是一个接口，只要实现这个接口，一个类的对象就可以实现序列化并且可以通过Intent和Binder传递
        系统已经为我们提供了许多可以序列化的类，可以直接序列化，intent，bundle，和Bitmap

     Binder:
        Binder是Android中一种跨进程通讯的方式，Binder还可以理解为一种虚拟的物理设备，他的设备驱动是/dev/Binder
        从framework层来讲，Binder是ServiceManager连接各种Manager和ManagerService的渠道

        所有通过binder传输的接口都要继承自IInterface接口

        当客户端和服务端处于同一个进程时，方法调用不会走跨进程的transact过程，而当两者处于不同进程时，方法调用需要走
        transact过程，这个过程由stub的内部代理类proxy来完成。

        Binder两个很重要的方法，linkToDeath和unLinkToDeath。Binder运行在服务端进程，如果服务端进程由于某种原因
        终止，会导致我们的的远程调用失败，更为关键的是，如果我们不知道Binder已经断裂，那么客户端的功能就会收到影响。
        为了解决这个问题，Binder中提供了两个配对的方法，linkToDeath和unlinkToDeath

        所有的非基本参数都需要一个定向tag来指出数据流通的方式，不管是 in , out , 还是 inout
        AIDL中的定向 tag 表示了在跨进程通信中数据的流向，其中 in 表示数据只能由客户端流向服务端， out 表示数据只能由服务端流向客户端，
        而 inout 则表示数据可在服务端与客户端之间双向流通

        四大组件中的三大组件（Activity,Service,Receiver），都是支持在Intent中传递bundle数据的，由于Bundle传递了
        Parcelable接口，所以他可以方便的在不同进程间传输，我们就可以在Bundle中附加我们需要传输给远端进程的信息，并
        通过intent发送出去，但是传输的信息必须是可以序列化，并且序列化过的。

        如果有的信息不能通过Intent进行传输，可以通过A进程启动B进程的一个Service，让其在后台计算，然后放到B进程的组件中，
        因为都在一个进程中，所以可以很容易拿到计算结果。

        Messenger对aidl进行了封装，使得很容易实现进程间通信，同时，由于他一次处理一个请求，因此在服务端我们不用考虑线程
        同步的问题，这是因为服务端不存在并发执行的情形

        Messenger的使用方式：
        1.服务端：首先，我们要先在服务端创建一个Service来处理客户端的请求，同时创建一个handler来并通过他来创建一个
        Messenger对象，然后在Service的onBind中返回Messenger对象底层的binder即可。
        2.客户端：客户端进程中，首先要绑定服务端的Service，绑定成功后用服务端返回IBinder对象创建一个Messenger,
        通过这个Messenger就可以向服务端发送消息了，发送消息类型为Message对象。如果需要服务端回应客户端，就和服务端
        一样，我们还需要创建一个handler并创建一个Messenger对象，并把这个Messenger对象通过Message的replyTo()
        参数传递给服务端，服务端就可以通过这个replyTo参数就可以回应客户端。

        在Messenger中传递必须将数据放入Message中，而Messenger和Message对象都实现了Parcelable接口，因此可以跨进程
        传输，简单来说，Message中支持的简单数据类型就是Messenger支持的传输类型。通过messenger来传输message，Message中
        能使用的载体有what，arg1，arg2，bundle以及replyTo，message中的object在同一个进程中很使用，但在跨进程通信
        的时候不好用。


        AIDL:
        Messenger是以串行的方式处理客户端发来的消息，如果大量的消息同时发送到服务器，服务端仍然只能一个一个的处理，
        如果有大量的并发请求，那么用Messenger就太不合适了。同时，Messenger的作用主要是为了消息传递，很多时候我们
        可能要跨进程调用服务端的方法，这种情形就要用到AIDL。

        AIDL支持的数据类型：
        1.基本数据类型（int，long,char,boolean,double）
        2.String 和 Charsequence
        3.List ：只支持ArrayList，里面的每个元素都要被AIDL支持
        4.Map:只支持hashMap，里面的每个元素都要被支持，包括key和value
        5.Parcelable:实现parcelable的对象
        6.AIDL

        如果AIDL中用到了自定义的Parcelble对象，那么必须新建一个和他同名的AIDL文件，并在其中声明他为parcelable
        类型，


        CopyOnWriteArrayList,这个类支持并发读写，AIDL方法是在服务端的Binder线程池中运行的，因此当多个客户端同时
        连接的时候，会存在多个客户端同时访问的情形，所以我们要在AIDL方法中处理线程同步。用CopyOnWriteArrayList
        来自动支持线程同步。
        前面提到，AIDL中能使用的List只是ArrayList，但是我们这里却使用了CopyOnWirteArrayList(注意他不继承ArrayList)，
        为什么能正常工作呢？这是因为AIDL中所支持的是抽象的List，而List只是一个接口，因此服务端返回的是CopyOnWriteArrayList，
        但是Binder会按照List的规范去访问数据并最终形成一个新的ArrayList传递给客户端。所以是可以的，和次类似的还有
        ConcurrentHashMap。


        AIDL接口不能调用普通的接口。

        多进程中，Binder会把客户端传递过来的对象重新转化并生生一个新的对象。虽然在注册和解注册中用的是同一个对象，但是
        通过Binder传递的到服务器后，会产生两个全新的对象，

        怎么做才能实现解注册功能？用RemoteCallBackList

        RemoteCallBackList是系统专门提供的用于删除跨进程listener对象的接口，RemoteCallBackList是一个泛型，支持管理
        任意的AIDL接口，RemoteCallBackList还有一个很重要的功能，那就是当客户端进程终止后，他能够自动移除客户端注册的
        listener。另外，RemoteCallBackList实现了线程同步的问题。

        我们知道，客户端调用远程服务的方法，被调用的方法运行在服务端的binder线程池中，同时，客户端线程会被挂起，这个时候，
        如果服务端方法执行比较耗时，就会导致客户端长时间的阻塞在这里，而如果这个客户端线程是UI线程的话，就会导致客户端的
        ANR，所以我们要避免调用远程服务的耗时方法。由于客户端的onServiceConnected 和 onServiceDisconnected方法只能
        运行在UI线程中，所以要避免调用远程的耗时方法。

        另外，由于服务端方法本身就运行在binder线程池中，所以服务端方法本身就可以执行大量的耗时操作，这个时候切记不要在服务
        端方法中开启异步线程去执行耗时方法。

        为了程序的健壮性，我们还需要做一步事情。Binder是可能意外死亡的，这往往是由于服务端进程意外停止了，这时我们需要重新
        连接服务端。有两种方法:
        1.给binder设置DeathRecipient监听，当binder死亡时，我们会收到binderDied方法的回调，在binderDied方法中重连。
        2.在onServiceDisconnected中重连远程服务。
        区别：onServiceDisconnected在UI线程中执行，binderDied在binder线程中执行。也就是在binderDied中不能访问UI线程。





