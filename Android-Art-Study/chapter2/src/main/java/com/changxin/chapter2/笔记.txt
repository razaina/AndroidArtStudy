进程和线程的概念：
    进程：系统最小的执行单元
    线程：系统最小的调度单元

    在四大组件中添加process属性的方式来规定运行在特定的进程中。
    android:process=":remote" :的含义是指要在当前进程名前加上当前的包名，所以全部的名字为packageName.remote

    以：开头的进程属于当前应用的私有进程，其他应用的组件不能和他跑在同一个进程中，不以：开头的进程属于全局进程，
    其他应用可以通过shareUid的方式可以和他跑在同一个进程中。

    Android会为每一个应用分配一个Uid，具有相同Uid的应用才能共享数据。所以，两个应用具有相同的sharedUid和签名
    才能共享数据，在这种情况下，可以互相访问私有数据，不管他们是否在同一个进程中。

    所有运行在不同进程中的4大组件，通过内存共享数据都会失败

    一般来说，使用多进程会有以下的问题：
        1.静态成员和单例模式完全失效
        2.线程同步机制完全失效（锁的不是同一个对象）
        3.sharedPreferences的可靠性下降（同时读写会出现问题）
        4.application会重复创建多次（每个进程开启的时候会为每个进程分配一个虚拟机，所以就相同于一个应用启动，
        application就会启动）


     虽然说不能直接共享内存，但是通过跨进程通信我们还是能够实现数据交互，实现跨进程的方式很多,比如：
        1.通过Intent来传递数据
        2.共享文件和sharedPreference
        3.基于Binder的Messenger,和aidl和Socket


     Serializable和Parcelble：
        1.Serializable：serialVersionUID，用来辅助序列化和反序列化的过程，只有serialVersionUID相同时，序列化
        和反序列化才能成功，一般我们去手动指定一个默认值1L。这样不管改变与否都能反序列话成功。
        2.Parcelbel：也是一个接口，只要实现这个接口，一个类的对象就可以实现序列化并且可以通过Intent和Binder传递
        系统已经为我们提供了许多可以序列化的类，可以直接序列化，intent，bundle，和Bitmap

     Binder:
        Binder是Android中一种跨进程通讯的方式，Binder还可以理解为一种虚拟的物理设备，他的设备驱动是/dev/Binder
        从framework层来讲，Binder是ServiceManager连接各种Manager和ManagerService的渠道

        所有通过binder传输的接口都要继承自IInterface接口

        当客户端和服务端处于同一个进程时，方法调用不会走跨进程的transact过程，而当两者处于不同进程时，方法调用需要走
        transact过程，这个过程由stub的内部代理类proxy来完成。

        Binder两个很重要的方法，linkToDeath和unLinkToDeath。Binder运行在服务端进程，如果服务端进程由于某种原因
        终止，会导致我们的的远程调用失败，更为关键的是，如果我们不知道Binder已经断裂，那么客户端的功能就会收到影响。
        为了解决这个问题，Binder中提供了两个配对的方法，linkToDeath和unlinkToDeath





