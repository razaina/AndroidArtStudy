View的事件体系

    left,top,right,bottom这些坐标都是相对于view的父容器来说的
    view：width = right - left
          height = bottom - top

    android3.0开始,View增加了额外的几个参数：x,y,translationX,traslationY,这几个参数也是相对于父容器的坐标，
    并且translationX,translationY的默认值是0。
           x = left + translationX
           y = top + translationY
    在view平移过程中，top和left表示的是原始左上角的信息位置，其值并不会发生改变，此时改变的是x,y,translationX,
    translationY;



    MotionEvent和TouchSlop
        MotionEvent：
            ACTION_DOWN:手指刚接触屏幕
            ACTION_MOVE:手指在屏幕上移动
            ACTION_UP:是指在屏幕上离开的那一瞬间

            点击屏幕后离开，松开：DOWN------>UP
            点击屏幕滑动一段时间后再松开：DOWN---->MOVE---->........MOVE---------->Up

            通过MotionEvent对象我们可以得到点击事件发生的x,y坐标。为此，系统提供了两组方法：getX/getY,getRawX/getRawY。
            他们的区别其实很简单，getX/getY返回的是相对于当前View左上角的x和y坐标，而getRawX和getRawY返回的是相对于
            手机屏幕左上角的x和y坐标。

        TouchSlop：
            TouchSlop是系统所能识别出的被认为是滑动的最小距离，换句话说，当手指在屏幕上滑动时，如果两次滑动之间的距离小于
            这个值，那么系统就认为没有滑动。ViewConfiguration.get(getContext().getScaledTouchSlop());


    VelocityTracker,GestureDetector和Scroller

         1.VelocityTracker：
            速度追踪，用于追踪手指在滑动过程中的的速度，包括水平方向和竖直方向的速度。他的使用过程很简单，首先，在view的
            onTouchEvent方法中追踪当前点击事件的速度：
                VelocityTracker velocityTracker = VelocityTracker.obtain();
                volecityTracker.addMovement(event);

                velocityTracker.computeCurrentVelocity(1000);//在获取速度之前一定要先调用这个方法。
                int xVelocity = volecityTracker.getXVolecity();
                int yVelocity = volecityTracker.getYVolecity();

            最后不需要使用它的的时候：
                velocityTracker.clear();
                velocityTracker.recycle();

         2.GestureDetector
            用于辅助检测用户的单击，滑动，长按，双击等行为。

         3.Scroller

         4.scrollTo和scrollBy

            View内部的两个属性mScrollX和mScrollY这个两个属性分别能通过getScrollX（），和getScrollY()来分别获得，
            在滑动过程中，mScrollX的值总是等于View左边缘和View内容左边缘在水平方向的距离，mScrollY也是，ScrollTo
            和scrollBy只能改变View在布局中的位置


         Scroller的工作原理：Scroller本身不能实现view的的滑动，它需要配合View的computeScroll方法才能完成弹性滑动的
         效果，它不断地让View重绘，每一次重绘据滑动起始时间会有一个时间间隔，通过这个时间间隔Scroller就可以得出View
         当前的滑动位置，知道了滑动位置就可以通过scrollTo方法来完成View滑动。


     View 的事件分发机制
          当一个View需要处理事件时，如果他设置了OnTouchListener，那么onTouch方法会被回调，返回false，onTouchEvent会被
          回调，返回true，onTouchEvent方法不会回调，所以onTouchLitener的优先级比onTouchEvent方法优先级高。

          事件的传递过程:Activity----------->Window----------->View

          ViewGroup默认不拦截任何事件
          View没有拦截事件的方法，一旦一个View被点击就会调用onTouchEvent方法。
          View的onTouchEvent默认就会消耗事件(返回true)，除非他是不可点击的，View的longCliable默认都为false，clickable属性
          分情况，button为true,textView为false。


     View的滑动冲突：
        1.外部滑动方向和内部滑动方向不一致
        2.外部滑动方向和内部滑动方向一致
        3.上面两种情况的嵌套







